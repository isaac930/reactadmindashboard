{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CODEMACHINE\\\\Desktop\\\\arg\\\\Interviews-kirumiraisaacReact\\\\Interviews-kirumiraisaacReact\\\\navigation-bar\\\\src\\\\pages\\\\customer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useHistory } from \"react-router-dom\";\nimport * as XLSX from 'xlsx';\nimport DataTable from 'react-data-table-component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Customer = () => {\n  _s();\n\n  let history = useHistory();\n\n  function handleClick() {\n    history.push(\"/\");\n  }\n\n  function base64toBlob(base64Data, contentType) {\n    contentType = contentType || '';\n    let sliceSize = 1024;\n    let byteCharacters = atob(base64Data);\n    let bytesLength = byteCharacters.length;\n    let slicesCount = Math.ceil(bytesLength / sliceSize);\n    let byteArrays = new Array(slicesCount);\n\n    for (let sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\n      let begin = sliceIndex * sliceSize;\n      let end = Math.min(begin + sliceSize, bytesLength);\n      let bytes = new Array(end - begin);\n\n      for (var offset = begin, i = 0; offset < end; ++i, ++offset) {\n        bytes[i] = byteCharacters[offset].charCodeAt(0);\n      }\n\n      byteArrays[sliceIndex] = new Uint8Array(bytes);\n    }\n\n    return new Blob(byteArrays, {\n      type: contentType\n    });\n  }\n\n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]); // process CSV data\n\n  const processData = dataString => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n    const list = [];\n\n    for (let i = 1; i < dataStringLines.length; i++) {\n      const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n      if (headers && row.length == headers.length) {\n        const obj = {};\n\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n\n          if (d.length > 0) {\n            if (d[0] == '\"') d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] == '\"') d = d.substring(d.length - 2, 1);\n          }\n\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        } // remove the blank rows\n\n\n        if (Object.values(obj).filter(x => x).length > 0) {\n          list.push(obj);\n        }\n      }\n    } // prepare columns list from headers\n\n\n    const columns = headers.map(c => ({\n      name: c,\n      selector: c\n    }));\n    setData(list);\n    setColumns(columns);\n  }; //const file = new Blob(['signedupcustomers.xlxs'], {type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'});\n\n\n  const file = new Blob(\"signedupcustomers.xlxs[0]\");\n  const reader = new FileReader();\n\n  reader.onload = evt => {\n    /* Parse data */\n    const bstr = evt.target.result;\n    const wb = XLSX.read(bstr, {\n      type: 'binary'\n    });\n    /* Get first worksheet */\n\n    const wsname = wb.SheetNames[0];\n    const ws = wb.Sheets[wsname];\n    /* Convert array of arrays */\n\n    const data = XLSX.utils.sheet_to_csv(ws, {\n      header: 1\n    });\n    processData(data);\n  };\n\n  reader.readAsBinaryString(file);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            class: \"btn btn-white btn-circle btn-xl nav-link d-flex justify-content-end\",\n            onClick: handleClick,\n            children: \"Navigate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"marquee\", {\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              style: {\n                color: 'red;'\n              },\n              children: \"This is service Genie Admin Templated Revised In React Js From Html Version\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 12\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(DataTable, {\n            pagination: true,\n            highlightOnHover: true,\n            columns: columns,\n            data: data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 2\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 1\n  }, this);\n};\n\n_s(Customer, \"O2ktGHioQy5VZ51VHxVpX01N8Ys=\", false, function () {\n  return [useHistory];\n});\n\n_c = Customer;\nexport default Customer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Customer\");","map":{"version":3,"sources":["C:/Users/CODEMACHINE/Desktop/arg/Interviews-kirumiraisaacReact/Interviews-kirumiraisaacReact/navigation-bar/src/pages/customer.js"],"names":["React","useState","useHistory","XLSX","DataTable","Customer","history","handleClick","push","base64toBlob","base64Data","contentType","sliceSize","byteCharacters","atob","bytesLength","length","slicesCount","Math","ceil","byteArrays","Array","sliceIndex","begin","end","min","bytes","offset","i","charCodeAt","Uint8Array","Blob","type","columns","setColumns","data","setData","processData","dataString","dataStringLines","split","headers","list","row","obj","j","d","substring","Object","values","filter","x","map","c","name","selector","file","reader","FileReader","onload","evt","bstr","target","result","wb","read","wsname","SheetNames","ws","Sheets","utils","sheet_to_csv","header","readAsBinaryString","color"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as XLSX from 'xlsx';\r\nimport DataTable from 'react-data-table-component';\r\n\r\n\r\n \r\nconst Customer = () => {\r\n\r\n  let history = useHistory();\r\n\r\n  function handleClick() {\r\n    history.push(\"/\");\r\n  }\r\n\r\n  function base64toBlob(base64Data, contentType) {\r\n    contentType = contentType || '';\r\n    let sliceSize = 1024;\r\n    let byteCharacters = atob(base64Data);\r\n    let bytesLength = byteCharacters.length;\r\n    let slicesCount = Math.ceil(bytesLength / sliceSize);\r\n    let byteArrays = new Array(slicesCount);\r\n    for (let sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\r\n        let begin = sliceIndex * sliceSize;\r\n        let end = Math.min(begin + sliceSize, bytesLength);\r\n\r\n        let bytes = new Array(end - begin);\r\n        for (var offset = begin, i = 0; offset < end; ++i, ++offset) {\r\n            bytes[i] = byteCharacters[offset].charCodeAt(0);\r\n        }\r\n        byteArrays[sliceIndex] = new Uint8Array(bytes);\r\n    }\r\n    return new Blob(byteArrays, { type: contentType });\r\n}\r\n\r\n\r\n  const [columns, setColumns] = useState([]);\r\n  const [data, setData] = useState([]);\r\n\r\n  // process CSV data\r\n  const processData = dataString => {\r\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\r\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\r\n    \r\n    const list = [];\r\n    for (let i = 1; i < dataStringLines.length; i++) {\r\n      const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\r\n      if (headers && row.length == headers.length) {\r\n        const obj = {};\r\n        for (let j = 0; j < headers.length; j++) {\r\n          let d = row[j];\r\n          if (d.length > 0) {\r\n            if (d[0] == '\"')\r\n              d = d.substring(1, d.length - 1);\r\n            if (d[d.length - 1] == '\"')\r\n              d = d.substring(d.length - 2, 1);\r\n          }\r\n          if (headers[j]) {\r\n            obj[headers[j]] = d;\r\n          }\r\n        }\r\n\r\n        // remove the blank rows\r\n        if (Object.values(obj).filter(x => x).length > 0) {\r\n          list.push(obj);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // prepare columns list from headers\r\n    const columns = headers.map(c => ({\r\n      name: c,\r\n      selector: c,\r\n    }));\r\n\r\n    setData(list);\r\n    setColumns(columns);\r\n  }\r\n\r\n  //const file = new Blob(['signedupcustomers.xlxs'], {type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'});\r\n    const file = new Blob(\"signedupcustomers.xlxs[0]\");\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (evt) => {\r\n      /* Parse data */\r\n      const bstr = evt.target.result;\r\n      const wb = XLSX.read(bstr, { type: 'binary' });\r\n      /* Get first worksheet */\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n      processData(data);\r\n    };\r\n    reader.readAsBinaryString(file);\r\n    \r\n   \r\n    \r\n  \r\n\r\n  return (\r\n<div>\r\n\r\n   <div>\r\n <div class=\"card\">\r\n  <div class=\"card-header\">\r\n  \r\n  <button type=\"button\" class=\"btn btn-white btn-circle btn-xl nav-link d-flex justify-content-end\" onClick={handleClick}>\r\n  Navigate\r\n  </button>\r\n  <marquee><h1 style={{color:'red;'}}>This is service Genie Admin Templated Revised In React Js From Html Version\r\n    </h1>\r\n  </marquee>\r\n  </div>\r\n\r\n  <div>\r\n    \r\n      <DataTable\r\n        pagination\r\n        highlightOnHover\r\n        columns={columns}\r\n        data={data}\r\n      />\r\n    </div>\r\n\r\n </div>\r\n </div>\r\n     </div>\r\n\r\n\r\n  );\r\n\r\n\r\n};\r\n  \r\nexport default Customer;"]},"metadata":{},"sourceType":"module"}