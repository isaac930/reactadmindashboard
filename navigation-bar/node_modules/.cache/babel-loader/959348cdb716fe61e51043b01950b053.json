{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CODEMACHINE\\\\Desktop\\\\arg\\\\Interviews-kirumiraisaacReact\\\\Interviews-kirumiraisaacReact\\\\navigation-bar\\\\src\\\\pages\\\\customer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useHistory } from \"react-router-dom\";\nimport * as XLSX from 'xlsx';\nimport DataTable from 'react-data-table-component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Customer = () => {\n  _s();\n\n  let history = useHistory();\n\n  function handleClick() {\n    history.push(\"/\");\n  }\n\n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]); // process CSV data\n\n  const processData = dataString => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n    const list = [];\n\n    for (let i = 1; i < dataStringLines.length; i++) {\n      const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n      if (headers && row.length == headers.length) {\n        const obj = {};\n\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n\n          if (d.length > 0) {\n            if (d[0] == '\"') d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] == '\"') d = d.substring(d.length - 2, 1);\n          }\n\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        } // remove the blank rows\n\n\n        if (Object.values(obj).filter(x => x).length > 0) {\n          list.push(obj);\n        }\n      }\n    } // prepare columns list from headers\n\n\n    const columns = headers.map(c => ({\n      name: c,\n      selector: c\n    }));\n    setData(list);\n    setColumns(columns);\n  }; // handle file upload\n  //const handleFileUpload = e => {\n  //const file = e.target.files[0];\n  //const file = \"datafiles/signedupcustomers.xlsx\";\n\n\n  const file = readXlsxFile(\"datafiles/signedupcustomers.xlsx\");\n  const reader = new FileReader();\n\n  reader.onload = evt => {\n    /* Parse data */\n    const bstr = evt.target.result;\n    const wb = XLSX.read(bstr, {\n      type: 'binary'\n    });\n    /* Get first worksheet */\n\n    const wsname = wb.SheetNames[0];\n    const ws = wb.Sheets[wsname];\n    /* Convert array of arrays */\n\n    const data = XLSX.utils.sheet_to_csv(ws, {\n      header: 1\n    });\n    processData(data);\n  };\n\n  reader.readAsBinaryString(file); // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            class: \"btn btn-white btn-circle btn-xl nav-link d-flex justify-content-end\",\n            onClick: handleClick,\n            children: \"Navigate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"marquee\", {\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              style: {\n                color: 'red;'\n              },\n              children: \"This is service Genie Admin Templated Revised In React Js From Html Version\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 12\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Read CSV file in React - \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://www.cluemediator.com\",\n              target: \"_blank\",\n              children: \"Clue Mediator\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 36\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n            pagination: true,\n            highlightOnHover: true,\n            columns: columns,\n            data: data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 2\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 1\n  }, this);\n};\n\n_s(Customer, \"O2ktGHioQy5VZ51VHxVpX01N8Ys=\", false, function () {\n  return [useHistory];\n});\n\n_c = Customer;\nexport default Customer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Customer\");","map":{"version":3,"sources":["C:/Users/CODEMACHINE/Desktop/arg/Interviews-kirumiraisaacReact/Interviews-kirumiraisaacReact/navigation-bar/src/pages/customer.js"],"names":["React","useState","useHistory","XLSX","DataTable","Customer","history","handleClick","push","columns","setColumns","data","setData","processData","dataString","dataStringLines","split","headers","list","i","length","row","obj","j","d","substring","Object","values","filter","x","map","c","name","selector","file","readXlsxFile","reader","FileReader","onload","evt","bstr","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","utils","sheet_to_csv","header","readAsBinaryString","color"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as XLSX from 'xlsx';\r\nimport DataTable from 'react-data-table-component';\r\n\r\n\r\n \r\nconst Customer = () => {\r\n\r\n  let history = useHistory();\r\n\r\n  function handleClick() {\r\n    history.push(\"/\");\r\n  }\r\n\r\n\r\n  const [columns, setColumns] = useState([]);\r\n  const [data, setData] = useState([]);\r\n\r\n  // process CSV data\r\n  const processData = dataString => {\r\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\r\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\r\n    \r\n    const list = [];\r\n    for (let i = 1; i < dataStringLines.length; i++) {\r\n      const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\r\n      if (headers && row.length == headers.length) {\r\n        const obj = {};\r\n        for (let j = 0; j < headers.length; j++) {\r\n          let d = row[j];\r\n          if (d.length > 0) {\r\n            if (d[0] == '\"')\r\n              d = d.substring(1, d.length - 1);\r\n            if (d[d.length - 1] == '\"')\r\n              d = d.substring(d.length - 2, 1);\r\n          }\r\n          if (headers[j]) {\r\n            obj[headers[j]] = d;\r\n          }\r\n        }\r\n\r\n        // remove the blank rows\r\n        if (Object.values(obj).filter(x => x).length > 0) {\r\n          list.push(obj);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // prepare columns list from headers\r\n    const columns = headers.map(c => ({\r\n      name: c,\r\n      selector: c,\r\n    }));\r\n\r\n    setData(list);\r\n    setColumns(columns);\r\n  }\r\n\r\n  // handle file upload\r\n  //const handleFileUpload = e => {\r\n    //const file = e.target.files[0];\r\n    //const file = \"datafiles/signedupcustomers.xlsx\";\r\n    const file =readXlsxFile(\"datafiles/signedupcustomers.xlsx\")\r\n    const reader = new FileReader();\r\n    reader.onload = (evt) => {\r\n      /* Parse data */\r\n      const bstr = evt.target.result;\r\n      const wb = XLSX.read(bstr, { type: 'binary' });\r\n      /* Get first worksheet */\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n      processData(data);\r\n    };\r\n    reader.readAsBinaryString(file);\r\n // }\r\n\r\n  return (\r\n<div>\r\n\r\n   <div>\r\n <div class=\"card\">\r\n  <div class=\"card-header\">\r\n  \r\n  <button type=\"button\" class=\"btn btn-white btn-circle btn-xl nav-link d-flex justify-content-end\" onClick={handleClick}>\r\n  Navigate\r\n  </button>\r\n  <marquee><h1 style={{color:'red;'}}>This is service Genie Admin Templated Revised In React Js From Html Version\r\n    </h1>\r\n  </marquee>\r\n  </div>\r\n\r\n  <div>\r\n      <h3>Read CSV file in React - <a href=\"https://www.cluemediator.com\" target=\"_blank\">Clue Mediator</a></h3>\r\n    \r\n      <DataTable\r\n        pagination\r\n        highlightOnHover\r\n        columns={columns}\r\n        data={data}\r\n      />\r\n    </div>\r\n\r\n </div>\r\n </div>\r\n     </div>\r\n\r\n\r\n  );\r\n\r\n\r\n};\r\n  \r\nexport default Customer;"]},"metadata":{},"sourceType":"module"}